def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # DANGER ZONE: These drops are likely INCORRECT due to Alembic confusion.
    # op.drop_table('ORGANIZATIONS')  # <-- Probably should NOT drop this
    # with op.batch_alter_table('users', schema=None) as batch_op:
    #     batch_op.drop_index(batch_op.f('email'))
    #     batch_op.drop_index(batch_op.f('username'))
    # op.drop_table('users')         # <-- Almost certainly should NOT drop this

    # Likely OK - Adjusting FK constraint for cascade delete
    with op.batch_alter_table('ADDRESSES', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('ADDRESSES_ibfk_1'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'USERS', ['user_id'], ['USER_CODE'], ondelete='CASCADE')

    # OK - Adding unique constraint needed for multi-sponsor cart
    with op.batch_alter_table('CART_ITEMS', schema=None) as batch_op:
        batch_op.create_unique_constraint('uq_user_sponsor_item', ['user_id', 'sponsor_id', 'item_id'])

    # OK - Allowing LICENSE_NUMBER to be nullable
    with op.batch_alter_table('DRIVERS', schema=None) as batch_op:
        batch_op.alter_column('LICENSE_NUMBER',
               existing_type=mysql.VARCHAR(length=50),
               nullable=True)

    # OK - Making sure application fields are NOT NULL (good practice)
    with op.batch_alter_table('DRIVER_APPLICATIONS', schema=None) as batch_op:
        batch_op.alter_column('DRIVER_ID',
               existing_type=mysql.INTEGER(),
               nullable=False)
        batch_op.alter_column('SPONSOR_ID',
               existing_type=mysql.INTEGER(),
               nullable=False)
        batch_op.alter_column('STATUS',
               existing_type=mysql.ENUM('Pending', 'Accepted', 'Rejected'),
               nullable=False,
               existing_server_default=sa.text("'Pending'"))
        batch_op.alter_column('APPLIED_AT',
               existing_type=mysql.DATETIME(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP')) # Note: default changes slightly here

    # Potential Issue Here: It seems to be dropping old columns (UPPERCASE)
    # and adding new ones (lowercase) + recreating FKs. This might be okay if
    # the casing actually changed in your models OR it might indicate Alembic
    # got confused. Double-check your ImpersonationLog model definition casing.
    # If the casing *didn't* change, you might need to adjust this to use
    # op.alter_column() instead of drop/add.
    with op.batch_alter_table('IMPERSONATION_LOG', schema=None) as batch_op:
        batch_op.add_column(sa.Column('actor_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('target_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('action', sa.String(length=20), nullable=False))
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=False))
        # Assuming FK names were auto-generated, dropping old ones might be necessary
        batch_op.drop_constraint(batch_op.f('IMPERSONATION_LOG_USERS_FK'), type_='foreignkey')
        batch_op.drop_constraint(batch_op.f('IMPERSONATION_LOG_USERS_FK_1'), type_='foreignkey')
        # Recreating FKs with new column names
        batch_op.create_foreign_key(None, 'USERS', ['target_id'], ['USER_CODE'])
        batch_op.create_foreign_key(None, 'USERS', ['actor_id'], ['USER_CODE'])
        # Dropping old columns (assuming case change or rename)
        batch_op.drop_column('ACTION')
        batch_op.drop_column('ACTOR_ID')
        batch_op.drop_column('TARGET_ID')
        batch_op.drop_column('CREATED_AT')

    # OK - Changing type from Integer to Boolean
    with op.batch_alter_table('NOTIFICATIONS', schema=None) as batch_op:
        batch_op.alter_column('READ_STATUS',
               existing_type=mysql.INTEGER(),
               type_=sa.Boolean(),
               existing_nullable=False) # MySQL stores BOOLEAN as TINYINT(1)

    # OK - Making STATUS NOT NULL
    with op.batch_alter_table('SPONSORS', schema=None) as batch_op:
        batch_op.alter_column('STATUS',
               existing_type=mysql.ENUM('Pending', 'Approved', 'Rejected'),
               nullable=False,
               existing_server_default=sa.text("'Pending'"))

    # OK - Applying changes to USERS table
    with op.batch_alter_table('USERS', schema=None) as batch_op:
        # Altering TOTP_SECRET length (check if data truncation is possible/ok)
        batch_op.alter_column('TOTP_SECRET',
               existing_type=mysql.VARCHAR(length=64), # Adjust existing_type if needed
               type_=sa.String(length=32),
               existing_nullable=True)
        # Altering LOCKED_REASON length
        batch_op.alter_column('LOCKED_REASON',
               existing_type=mysql.VARCHAR(length=100), # Adjust existing_type if needed
               type_=sa.String(length=255),
               existing_nullable=True)
        # Adding unique constraint to EMAIL
        batch_op.create_unique_constraint(None, ['EMAIL']) # Use batch_op.f() for auto-named constraint if preferred
        # Dropping the POINTS column (Correct based on models.py change)
        batch_op.drop_column('POINTS')

    # OK - Applying changes to WISHLIST_ITEMS
    with op.batch_alter_table('WISHLIST_ITEMS', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('item_id')) # Drop old index if it existed
        # Create new composite unique constraint
        batch_op.create_unique_constraint('uq_user_wishlist_item', ['user_id', 'item_id'])
        # Recreate FK constraint with cascade delete
        batch_op.drop_constraint(batch_op.f('WISHLIST_ITEMS_ibfk_1'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'USERS', ['user_id'], ['USER_CODE'], ondelete='CASCADE') # Use batch_op.f() for auto-name

    # ### end Alembic commands ###